mainmodule tram_multivertex_sssp {
	extern module GraphGenerator;

  // Mean arrity of the graph 
  readonly int                             K;
  // Graph size (number of vertices)
  readonly CmiUInt8                         N;
  readonly CmiUInt8                         M;
  // Handle to the test driver (chare)
  readonly CProxy_TestDriver               driverProxy;
  // Handle to the communication library (group)
  readonly CProxy_ArrayMeshStreamer<dtype, long long, SSSPMultiVertex,
                                    SimpleMeshRouter> aggregator;

  mainchare TestDriver {
    entry TestDriver (CkArgMsg *args);
    entry [threaded] void start();
    entry [threaded] void restart();
		entry void startVerificationPhase();
    entry [reductiontarget] void done(CmiUInt8 globalNumScannedEdges);
    //entry void startVerificationPhase();
		entry void startGraphConstruction();
		entry void exit();
  };

	class SSSPEdge;
  array [1D] SSSPMultiVertex {
    entry SSSPMultiVertex();
		entry void connectVertex(std::pair<CmiUInt8, SSSPEdge> & edge);
		entry void make_root(const CmiUInt8 & root);
		//entry void update(const CmiUInt8 & v, const double & weight, const CmiUInt8 & parent); 
		entry void verify(); 
		entry void check(const CmiUInt8 & v, const double & weight); 
		entry void getScannedVertexNum();
		entry void foo();
  };

#include "common-multi.ci"
};
