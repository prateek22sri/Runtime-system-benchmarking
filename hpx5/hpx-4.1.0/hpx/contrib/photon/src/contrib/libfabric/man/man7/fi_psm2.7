.TH "fi_psm2" "7" "2016\-02\-28" "Libfabric Programmer\[aq]s Manual" "Libfabric v1.4.1"
.SH NAME
.PP
The PSM2 Fabric Provider
.SH OVERVIEW
.PP
The \f[I]psm2\f[] provider runs over the PSM 2.x interface that is
supported by the Intel Omni\-Path Fabric.
PSM 2.x has all the PSM 1.x features plus a set of new functions with
enhanced capabilities.
Since PSM 1.x and PSM 2.x are not ABI compatible the \f[I]psm2\f[]
provider only works with PSM 2.x and doesn\[aq]t support Intel TrueScale
Fabric.
.SH LIMITATIONS
.PP
The \f[I]psm2\f[] provider doesn\[aq]t support all the features defined
in the libfabric API.
Here are some of the limitations:
.PP
Endpoint types : Only support non\-connection based types
\f[I]FI_DGRAM\f[] and \f[I]FI_RDM\f[]
.PP
Endpoint capabilities : Endpoints can support any combination of data
transfer capabilities \f[I]FI_TAGGED\f[], \f[I]FI_MSG\f[],
\f[I]FI_ATOMICS\f[], and \f[I]FI_RMA\f[].
These capabilities can be further refined by \f[I]FI_SEND\f[],
\f[I]FI_RECV\f[], \f[I]FI_READ\f[], \f[I]FI_WRITE\f[],
\f[I]FI_REMOTE_READ\f[], and \f[I]FI_REMOTE_WRITE\f[] to limit the
direction of operations.
.PP
\f[I]FI_MULTI_RECV\f[] is supported for non\-tagged message queue only.
.PP
Other supported capabilities include \f[I]FI_TRIGGER\f[],
\f[I]FI_REMOTE_CQ_DATA\f[], and \f[I]FI_SOURCE\f[].
.PP
Modes : \f[I]FI_CONTEXT\f[] is required for the \f[I]FI_TAGGED\f[] and
\f[I]FI_MSG\f[] capabilities.
That means, any request belonging to these two categories that generates
a completion must pass as the operation context a valid pointer to type
\f[I]struct fi_context\f[], and the space referenced by the pointer must
remain untouched until the request has completed.
If none of \f[I]FI_TAGGED\f[] and \f[I]FI_MSG\f[] is asked for, the
\f[I]FI_CONTEXT\f[] mode is not required.
.PP
Progress : The \f[I]psm2\f[] provider requires manual progress.
The application is expected to call \f[I]fi_cq_read\f[] or
\f[I]fi_cntr_read\f[] function from time to time when no other libfabric
function is called to ensure progress is made in a timely manner.
The provider does support auto progress mode.
However, the performance can be significantly impacted if the
application purely depends on the provider to make auto progress.
.PP
Unsupported features : These features are unsupported: connection
management, scalable endpoint, passive endpoint, shared receive context,
and send/inject with immediate data over tagged message queue.
.SH RUNTIME PARAMETERS
.PP
The \f[I]psm2\f[] provider checks for the following environment
variables:
.PP
\f[I]FI_PSM2_UUID\f[] : PSM requires that each job has a unique ID
(UUID).
All the processes in the same job need to use the same UUID in order to
be able to talk to each other.
The PSM reference manual advises to keep UUID unique to each job.
In practice, it generally works fine to reuse UUID as long as (1) no two
jobs with the same UUID are running at the same time; and (2) previous
jobs with the same UUID have exited normally.
If running into "resource busy" or "connection failure" issues with
unknown reason, it is advisable to manually set the UUID to a value
different from the default.
.PP
The default UUID is 00FF00FF\-0000\-0000\-0000\-00FF0F0F00FF.
.PP
\f[I]FI_PSM2_NAME_SERVER\f[] : The \f[I]psm2\f[] provider has a simple
built\-in name server that can be used to resolve an IP address or host
name into a transport address needed by the \f[I]fi_av_insert\f[] call.
The main purpose of this name server is to allow simple client\-server
type applications (such as those in \f[I]fabtest\f[]) to be written
purely with libfabric, without using any out\-of\-band communication
mechanism.
For such applications, the server would run first, and the client would
call \f[I]fi_getinfo\f[] with the \f[I]node\f[] parameter set to the IP
address or host name of the server.
The resulting \f[I]fi_info\f[] structure would have the transport
address of the server in the \f[I]dest_addr\f[] field.
.PP
The name server won\[aq]t work properly if there are more than one
processes from the same job (i.e.
with the same UUID) running on the same node and acting as servers.
For such scenario it is recommended to have each process getting local
transport address with \f[I]fi_getname\f[] and exchanging the addresses
with out\-of\-band mechanism.
.PP
The name server is on by default.
It can be turned off by setting the variable to 0.
This may save a small amount of resource since a separate thread is
created when the name server is on.
.PP
The provider detects OpenMPI and MPICH runs and changes the default
setting to off.
.PP
\f[I]FI_PSM2_TAGGED_RMA\f[] : The RMA functions are implemented on top
of the PSM Active Message functions.
The Active Message functions have limit on the size of data can be
transferred in a single message.
Large transfers can be divided into small chunks and be pipe\-lined.
However, the bandwidth is sub\-optimal by doing this way.
.PP
The \f[I]psm2\f[] provider use PSM tag\-matching message queue functions
to achieve higher bandwidth for large size RMA.
It takes avdantage of the extra tag bits available in PSM2 to separate
the RMA traffic from the regular tagged message queue.
.PP
The option is on by default.
To turn it off set the variable to 0.
.PP
\f[I]FI_PSM2_DELAY\f[] : Time (seconds) to sleep before closing PSM
endpoints.
This is a workaround for a bug in some versions of PSM library.
.PP
The default setting is 1.
.PP
\f[I]FI_PSM2_TIMEOUT\f[] : Timeout (seconds) for gracefully closing PSM
endpoints.
A forced closing will be issued if timeout expires.
.PP
The default setting is 5.
.PP
\f[I]FI_PSM2_PROG_INTERVAL\f[] : When auto progress is enabled (asked
via the hints to \f[I]fi_getinfo\f[]), a progress thread is created to
make progress calls from time to time.
This option set the interval (microseconds) between progress calls.
.PP
The default setting is 1 if affininty is set, or 1000 if not.
See \f[I]FI_PSM2_PROG_AFFINITY\f[].
.PP
\f[I]FI_PSM2_PROG_AFFINITY\f[] : When set, specify the set of CPU cores
to set the progress thread affinity to.
The format is
\f[C]<start>[:<end>[:<stride>]][,<start>[:<end>[:<stride>]]]*\f[], where
each triplet \f[C]<start>:<end>:<stride>\f[] defines a block of
core_ids.
Both \f[C]<start>\f[] and \f[C]<end>\f[] can be either the
\f[C]core_id\f[] (when >=0) or \f[C]core_id\ \-\ num_cores\f[] (when
<0).
.PP
By default affinity is not set.
.SH SEE ALSO
.PP
\f[C]fabric\f[](7), \f[C]fi_provider\f[](7), \f[C]fi_psm\f[](7),
.SH AUTHORS
OpenFabrics.
