.TH "fi_gni" "7" "2016\-10\-07" "Libfabric Programmer\[aq]s Manual" "Libfabric v1.4.1"
.SH NAME
.PP
The GNI Fabric Provider
.SH OVERVIEW
.PP
The GNI provider runs on Cray XC (TM) systems utilizing the user\-space
Generic Network Interface (uGNI) which provides low\-level access to the
Aries interconnect.
The Aries interconnect is designed for low\-latency one\-sided messaging
and also includes direct hardware support for common atomic operations
and optimized collectives.
.SH REQUIREMENTS
.PP
The GNI provider runs on Cray XC systems running CLE 5.2 UP04 or higher
using gcc version 4.9 or higher.
.SH SUPPORTED FEATURES
.PP
The GNI provider supports the following features defined for the
libfabric API:
.PP
\f[I]Endpoint types\f[] : The provider supports the \f[I]FI_EP_RDM\f[]
and \f[I]FI_EP_DGRAM\f[] endpoint types.
.PP
\f[I]Address vectors\f[] : The provider implements both the
\f[I]FI_AV_MAP\f[] and \f[I]FI_AV_TABLE\f[] address vector types.
.PP
\f[I]Memory registration modes\f[] : The provider implements the
\f[I]FI_MR_BASIC\f[] memory registration mode.
.PP
\f[I]Data transfer operations\f[]
.PP
: The following data transfer interfaces are supported for all endpoint
types: \f[I]FI_ATOMIC\f[], \f[I]FI_MSG\f[], \f[I]FI_RMA\f[],
\f[I]FI_TAGGED\f[].
See DATA TRANSFER OPERATIONS below for more details.
.PP
\f[I]Completion events\f[] : The GNI provider supports
\f[I]FI_CQ_FORMAT_CONTEXT\f[], \f[I]FI_CQ_FORMAT_MSG\f[],
\f[I]FI_CQ_FORMAT_DATA\f[] and \f[I]FI_CQ_FORMAT_TAGGED\f[] with wait
objects of type \f[I]FI_WAIT_NONE\f[], \f[I]FI_WAIT_FD\f[], and
\f[I]FI_WAIT_MUTEX_COND\f[].
.PP
\f[I]Modes\f[] : The GNI provider does not require any operation modes.
.PP
\f[I]Progress\f[]
.PP
: For both control and data progress, the GNI provider supports both
\f[I]FI_PROGRESS_AUTO\f[] and \f[I]FI_PROGRESS_MANUAL\f[], with a
default set to \f[I]FI_PROGRESS_AUTO\f[].
.PP
\f[I]Additional Features\f[] : The GNI provider also supports the
following capabilities and features: \- \f[I]FI_MULTI_RECV\f[] \-
\f[I]FI_SOURCE\f[] \- \f[I]FI_FENCE\f[] \- \f[I]FI_RM_ENABLED\f[] \-
\f[I]FABRIC_DIRECT\f[] compilation mode
.SH DATA TRANSFER OPERATIONS
.SS FI_ATOMIC
.PP
Currently, the GNI provider only supports atomic operations supported
directly by the Aries NIC.
These include operations on 32\- and 64\-bit, signed and unsigned
integer and floating point values.
Specifically,
.SS Basic (fi_atomic, etc.)
.IP \[bu] 2
\f[I]FI_MIN\f[], \f[I]FI_MAX\f[] (no unsigned)
.IP \[bu] 2
\f[I]FI_SUM\f[] (no 64\-bit floating point)
.IP \[bu] 2
\f[I]FI_BOR\f[], \f[I]FI_BAND\f[], \f[I]FI_BXOR\f[] (no floating point)
.IP \[bu] 2
\f[I]FI_ATOMIC_WRITE\f[]
.SS Fetching (fi_fetch_atomic, etc.)
.IP \[bu] 2
All of the basic operations as above
.IP \[bu] 2
FI_ATOMIC_READ
.SS Comparison (fi_compare_atomic, etc.)
.IP \[bu] 2
FI_CSWAP
.IP \[bu] 2
FI_MSWAP
.SS FI_MSG
.PP
All \f[I]FI_MSG\f[] operations are supported.
.SS FI_RMA
.PP
All \f[I]FI_RMA\f[] operations are supported.
.SS FI_TAGGED
.PP
All \f[I]FI_TAGGED\f[] operations are supported except
\f[C]fi_tinjectdata\f[].
.SH GNI EXTENSIONS
.PP
The GNI provider exposes low\-level tuning parameters via a domain and
endpoint \f[C]fi_open_ops\f[] interface named
\f[I]FI_GNI_DOMAIN_OPS_1\f[] and \f[I]FI_GNI_EP_OPS_1\f[].
The flags parameter is currently ignored.
The fi_open_ops function takes a \f[C]struct\ fi_gni_ops_domain\f[] or a
\f[C]struct\ fi_gni_ops_ep\f[] parameter respectively and populates it
with the following:
.IP
.nf
\f[C]
struct\ fi_gni_ops_domain\ {
\ \ \ \ int\ (*set_val)(struct\ fid\ *fid,\ dom_ops_val_t\ t,\ void\ *val);
\ \ \ \ int\ (*get_val)(struct\ fid\ *fid,\ dom_ops_val_t\ t,\ void\ *val);
\ \ \ \ int\ (*flush_cache)(struct\ fid\ *fid);
};

struct\ fi_gni_ops_ep\ {
\ \ \ \ int\ (*set_val)(struct\ fid\ *fid,\ dom_ops_val_t\ t,\ void\ *val);
\ \ \ \ int\ (*get_val)(struct\ fid\ *fid,\ dom_ops_val_t\ t,\ void\ *val);
\ \ \ \ \ \ \ \ size_t\ (*native_amo)(struct\ fid_ep\ *ep,\ const\ void\ *buf,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ size_t\ count,void\ *desc,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ fi_addr_t\ dest_addr,\ uint64_t\ addr,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ uint64_t\ key,\ enum\ fi_datatype\ datatype,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ enum\ gnix_fab_req_type\ req_type,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ void\ *context);
};
\f[]
.fi
.PP
The \f[C]set_val\f[] function sets the value of a given parameter; the
\f[C]get_val\f[] function returns the current value.
For \f[I]FI_GNI_DOMAIN_OPS_1\f[], the currently supported values are:
.PP
\f[I]GNI_MSG_RENDEZVOUS_THRESHOLD\f[] : Threshold message size at which
a rendezvous protocol is used for \f[I]FI_MSG\f[] data transfers.
The value is of type uint32_t.
.PP
\f[I]GNI_RMA_RDMA_THRESHOLD\f[] : Threshold message size at which RDMA
is used for \f[I]FI_RMA\f[] data transfers.
The value is of type uint32_t.
.PP
\f[I]GNI_CONN_TABLE_INITIAL_SIZE\f[] : Initial size of the internal
table data structure used to manage connections.
The value is of type uint32_t.
.PP
\f[I]GNI_CONN_TABLE_MAX_SIZE\f[] : Maximum size of the internal table
data structure used to manage connections.
The value is of type uint32_t.
.PP
\f[I]GNI_CONN_TABLE_STEP_SIZE\f[] : Step size for increasing the size of
the internal table data structure used to manage internal GNI
connections.
The value is of type uint32_t.
.PP
\f[I]GNI_VC_ID_TABLE_CAPACITY\f[] : Size of the virtual channel (VC)
table used for managing remote connections.
The value is of type uint32_t.
.PP
\f[I]GNI_MBOX_PAGE_SIZE\f[] : Page size for GNI SMSG mailbox
allocations.
The value is of type uint32_t.
.PP
\f[I]GNI_MBOX_NUM_PER_SLAB\f[] : Number of GNI SMSG mailboxes per
allocation slab.
The value is of type uint32_t.
.PP
\f[I]GNI_MBOX_MAX_CREDIT\f[] : Maximum number of credits per GNI SMSG
mailbox.
The value is of type uint32_t.
.PP
\f[I]GNI_MBOX_MSG_MAX_SIZE\f[] : Maximum size of GNI SMSG messages.
The value is of type uint32_t.
.PP
\f[I]GNI_RX_CQ_SIZE\f[] : Recommended GNI receive CQ size.
The value is of type uint32_t.
.PP
\f[I]GNI_TX_CQ_SIZE\f[] : Recommended GNI transmit CQ size.
The value is of type uint32_t.
.PP
\f[I]GNI_MAX_RETRANSMITS\f[] : Maximum number of message retransmits
before failure.
The value is of type uint32_t.
.PP
\f[I]GNI_MR_CACHE_LAZY_DEREG\f[] : Enable or disable lazy deregistration
of memory.
The value is of type int32_t.
.PP
\f[I]GNI_MR_CACHE\f[] : Select the type of cache that the domain will
use.
Valid choices are the following: \[aq]internal\[aq], \[aq]udreg\[aq], or
\[aq]none\[aq].
\[aq]internal\[aq] refers to the GNI provider internal registration
cache.
\[aq]udreg\[aq] refers to a user level dreg library based cache.
Lastly, \[aq]none\[aq] refers to device direct registration without a
provider cache.
.PP
\f[I]GNI_MR_HARD_REG_LIMIT\f[] : Maximum number of registrations.
Applies only to the GNI provider cache.
The value is of type int32_t (\-1 for no limit).
.PP
\f[I]GNI_MR_SOFT_REG_LIMIT\f[] : Soft cap on the registration limit.
Applies only to the GNI provider cache.
The value is of type int32_t (\-1 for no limit).
.PP
\f[I]GNI_MR_HARD_STALE_REG_LIMIT\f[] : Maximum number of stale
registrations to be held in cache.
This applies to the GNI provider cache and the udreg cache.
The value is of type int32_t (\-1 for no limit for the GNI provider
cache and udreg cache values must be greater than 0).
.PP
\f[I]GNI_MR_UDREG_LIMIT\f[] : Maximum number of registrations.
Applies only to the udreg cache.
The value is of type int32_t.
The value must be greater than 0.
.PP
\f[I]GNI_XPMEM_ENABLE\f[] : Enable or disable use of XPMEM for on node
messages using the GNI provider internal rendezvous protocol.
The value is of type bool.
.PP
The \f[C]flush_cache\f[] function allows the user to flush any stale
registration cache entries from the cache.
This has the effect of removing registrations from the cache that have
been deregistered with the provider, but still exist in case that they
may be reused in the near future.
Flushing the stale registrations forces hardware\-level deregistration
of the stale memory registrations and frees any memory related to those
stale registrations.
Only the provider\-level registration struct is freed, not the user
buffer associated with the registration.
The parameter for \f[C]flush_cache\f[] is a struct fid pointer to a
fi_domain.
The memory registration cache is tied to the domain, so issuing a
\f[C]flush_cache\f[] to the domain will flush the registration cache of
the domain.
.PP
For \f[I]FI_GNI_EP_OPS_1\f[], the currently supported values are:
\f[I]GNI_HASH_TAG_IMPL\f[] : Use a hashlist for the tag list
implementation.
The value is of type uint32_t.
.PP
The \f[C]native_amo\f[] function allows the user to call GNI native
atomics that are not implemented in the libfabric API.
The parameters for native_amo are the same as the fi_atomic function but
adds the following parameter:
.PP
\f[I]enum gnix_fab_req_type req_type\f[] : The req_type\[aq]s supported
with this call are GNIX_FAB_RQ_NAMO_AX (AND and XOR), and
GNIX_FAB_RQ_NAMO_AX_S (AND and XOR 32 bit), GNIX_FAB_RQ_NAMO_FAX (Fetch
AND and XOR) and GNIX_FAB_RQ_NAMO_FAX_S (Fetch AND and XOR 32 bit).
.SH SEE ALSO
.PP
\f[C]fabric\f[](7), \f[C]fi_open_ops\f[](3), \f[C]fi_provider\f[](7),
\f[C]fi_getinfo\f[](3) \f[C]fi_atomic\f[](3)
.PP
For more information on uGNI, see \f[I]Using the GNI and DMAPP APIs\f[]
(S\-2446\-3103, Cray Inc.).
For more information on the GNI provider, see \f[I]An Implementation of
OFI libfabric in Support of Multithreaded PGAS Solutions\f[] (PGAS
\[aq]15).
.SH AUTHORS
OpenFabrics.
