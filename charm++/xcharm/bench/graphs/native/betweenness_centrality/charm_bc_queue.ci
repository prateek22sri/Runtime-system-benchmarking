mainmodule charm_bc_queue {
	extern module GraphGenerator;

  // Mean arrity of the graph 
  readonly int                             K;
  // Graph size (number of vertices)
  readonly CmiUInt8                         N;
  readonly CmiUInt8                         M;
  // Handle to the test driver (chare)
  readonly CProxy_TestDriver               driverProxy;

  mainchare TestDriver {
    entry TestDriver (CkArgMsg *args);
    entry [threaded] void startMultiBFSPhase();
    entry void startComputeCentralityPhase();
    entry void restart();
		entry void startVerificationPhase();
    entry [reductiontarget] void done();
		entry void startGraphConstruction();
		entry void exit();

		entry void set_fin(bool);
  };

	class BetweenCentrEdge;
  array [1D] BetweenCentrVertex {
    entry BetweenCentrVertex();
		entry void connectVertex(const BetweenCentrEdge & edge);

		// multi bfs methods
		entry void make_root();
		entry void update(unsigned int d, unsigned int paths, CmiUInt8 source); 
		entry void resume(CmiUInt8 source); 
 
		// compute centrality methods
		entry void compute_centrality();
		entry void update_centrality(unsigned int du, unsigned int dj, 
				unsigned int paths_to_u, unsigned int paths_to_j, CmiUInt8 j);

		entry void verify();
		entry void check(int level);
		entry void dump_edges();
		entry void dump_dist();
  };

	readonly CProxy_MultiBFSDriver multiBFSDriver;

	group MultiBFSDriver {
		entry MultiBFSDriver(CProxy_BetweenCentrVertex & g);
		entry [threaded] void run();
		entry void addVertexToFront(CmiUInt8, CmiUInt8);
		entry void test();
		entry [reductiontarget] void check(CmiUInt8 tot);
	};

#include "common-single.ci"
};
